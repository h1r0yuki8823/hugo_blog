<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hiroyuki&#43;=1</title>
    <link>https://hiroyuki8823.net/</link>
    <description>Recent content on hiroyuki&#43;=1</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp-JP</language>
    <lastBuildDate>Mon, 01 Apr 2019 22:51:30 +0900</lastBuildDate>
    
	<atom:link href="https://hiroyuki8823.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>User_agent_stylesheet_Invalidation</title>
      <link>https://hiroyuki8823.net/user_agent_stylesheet_invalidation/</link>
      <pubDate>Mon, 01 Apr 2019 22:51:30 +0900</pubDate>
      
      <guid>https://hiroyuki8823.net/user_agent_stylesheet_invalidation/</guid>
      <description>小話 今、友人にサイトを作って欲しいと言われ簡単なサイトを作っている。簡単にwixのようなサイトを作成するサービスで済まそうと思ったけどもちょうどvueの教本が終わった所だったので、練習がてらVueを使用して作ってみることにした。
今回はBootstrapのようなcssフレームワークを使用しないので教本を見ながらcssを設定している。
四方に微妙な余白が サイトが形になっていくと四方の余白があることに気づいた。
chromeのelementsを見てみるとbodyにmarginが8px設定されていることが確認できる
cssを探してみてもどこにもmargin:8px;という記述はない
よくよくelementsをみていると user agent stylesheetと書かれている。
user agent stylesheetとは? user agent stylesheetはブラウザごとに定義されたデフォルトのcss設定のこと。
このcssをリセットするためにはリセットCSSというものを使えば、ブラウザ固有のCSSの設定を上書きできる
一応メリット、デメリットはあるみたいだ。
メリット
ブラウザごとのデザインを揃えることができる 自分でブラウザごとのCSSを書かなくて済む
デメリット
CSSのコード量が多くなる リセットして項目を自分で書く必要がある
## とはいえ デメリットがあるとはいえ世の中に公開されているwebサイトはほとんどリセットCSSを使用しているので素直に使用しよう
## 使用方法 リセットcssには種類があるが今回はnormalize.cssを使用
github
githubのページにアクセスして表示されたコードをコピペしてhtmlファイルのheaderタグの中で使用
&amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Normalize&amp;lt;/title&amp;gt; &amp;lt;!-- normalize.cssの読込 --&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;normalize.css&amp;quot;&amp;gt; &amp;lt;!-- 自身で作成したCSSファイルの読込 --&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt; &amp;lt;/head&amp;gt;  ## vueの場合 vue-cliを使用してnpmでインストールすることもできる
こっちの方が楽な気がする
 $ npm install -D normalize.css  インストールしたらルートとなるVueファイルで使用する
&amp;lt;script&amp;gt; import &#39;normalize.css&#39; export default{ name: &#39;App&#39; } &amp;lt;/script&amp;gt;  適応したものをみてみると。。。</description>
    </item>
    
    <item>
      <title>Attend_jsLT</title>
      <link>https://hiroyuki8823.net/javascript/attend_jslt/</link>
      <pubDate>Thu, 21 Feb 2019 22:10:34 +0900</pubDate>
      
      <guid>https://hiroyuki8823.net/javascript/attend_jslt/</guid>
      <description>JavaScriptの勉強会に参加してきた たまにconnpassでもくもく会に参加したりしているのだが、今回はJavaScriptのLT大会に参加してきた。
参加してきた会はこちら
今回は初心者向けという事で年末からJS書き始めたばかりだけどとりあえず参加してみようという事で参加してきた
LT発表一覧はリンク先に書いてあります
発表の中には自分には難しいものもあれば、JSでRDBを作るといった面白いものまであって楽しい時間だった。
発表中に登壇者参加者にどうしていいかわからないから助けてほしいという場面もあったが、普通に参加者が手を差し伸べてライブコーディングする場面もあり非常に楽しかった。
LT大会参加してみたいけど尻込みしている方はこの会は参加しやすかったのでおすすめです。
参加してきてよかった事 普段自分の範囲外のことを学べた
例えば今回SEOの話が出てきて、検索上位に表示させるためにはどうすればいいのか、なんて考えたこともなかった
やはり独学で勉強しているだけだと自分の範囲のことだけの知識が自然と集まってきてしまう。
それはそれで大事なことだけれども、他の人がどういうことをしているのか、どういう技術を使っているのか知るのはすごく大事なことだと思った。
特に僕みたいに普段JavaScriptを業務で使っていないし、会社で使っている人もいない場合、現場で使われているものや、細かい部分をネットの情報だけで追っていくにはなかなか難しいなと今回参加して思った。
機会があれば いつか自分も発表できる事があれば、登壇して喋ってみたいと思った。
そのためにも日々のinputとoutputをしっかりしていこう。
でもまぁやっぱ仕事でJSとか使ってみたいなぁ</description>
    </item>
    
    <item>
      <title>Use_Riotapi</title>
      <link>https://hiroyuki8823.net/flask/use_riotapi/</link>
      <pubDate>Fri, 08 Feb 2019 12:14:59 +0900</pubDate>
      
      <guid>https://hiroyuki8823.net/flask/use_riotapi/</guid>
      <description>riotapiを使ってみたかった もともとjavaScriptのReactを使って簡単なアプリケーションを作ろうと思い、どんなアプリケーションを作ろうか考えた時に、自分の好きなゲーム「League of Ledends」に使えるメモアプリを作ろうと考えた。
「League of Ledends」通称LoLの開発元のRiot Gamesはriot_apiという試合のデータ等を取得できるAPIを公開している。今回はこれを使用したかった。
最初はReactだけで実装できると考えて簡単にボタンを押したら、APIを叩いて情報を取ってくるものを作った。
取って来れなかった。。。 実行してみるとエラーが出てきて取ってこれなかった。調べてみるとCROS関係で駄目みたいだ。CROS関係も勉強しないと。
riot_apiをの使用規約にAPI_KEYを公開するなと書かれている。フロントにkeyを記述するとapi_keyを見られる可能性があるのでapiサーバー側がブロックするよう設定されているようだ。
flaskを使用 中継apiサーバーを立てて、そのサーバーにriot_apiを叩いてもらうという構想に行き着いた。今回の構想はこうだ
フロント =&amp;gt; getリクエスト =&amp;gt; 中継サーバー =&amp;gt; getリクエスト =&amp;gt; riot_api =&amp;gt; josnを返す =&amp;gt; 中継サーバー =&amp;gt; jsonを整えたデータを返す =&amp;gt; フロント
という形だ。
軽量のフレームワークは色々あるがpythonにはRiotWatcherというライブラリあるのでflaskを採用した。
実際にRiotApiを使用してみた githubに上げる時にAPI_KEYを公開しないため.envファイルに環境変数を設定してそこを使用するという事をやりたかった。 まずは.envファイルを作りその中に
API_KEY = XXXXXXXXXXXXXXXXXXXXXXXXX  と記述
settings.pyを作成し、settingsファイルが.envに入っているAPI_KEYを取ってくる処理を書く
その際にはライブラリのpython-dotenvを使用する
import os from os.path import join.dirname from dotenv import load_dotenv dotenv_path = join(dirname(__file__), &#39;.env&#39;) load_dotenv(dotenv_path) AP = os.environ.get(&amp;quot;API_KEY&amp;quot;)  実際にAPI_KEYを使用するファイルに記述する
from flask import Flask, request, jsonify from riotwatcher import RiotWatcher, ApiError import json import collections as cl import pprint import settings API_KEY = settings.</description>
    </item>
    
    <item>
      <title>Class</title>
      <link>https://hiroyuki8823.net/javascript/class/</link>
      <pubDate>Thu, 17 Jan 2019 12:43:23 +0900</pubDate>
      
      <guid>https://hiroyuki8823.net/javascript/class/</guid>
      <description>Class JavaScriptのClassについて勉強したので、その忘備録として学習メモを載っけます。
ES5まではクラス機能を使用するのにprototypeを使用して、複雑なコードを書かなければならなかったがES6からclass機能そのものが実装された。
classの基本構文 class Champion{ name(){ return &#39;ガレン&#39; } } const champion = new Champion(); chamion.name(); //ガレン  classの初期化 他の言語でいうinitializeの機能はconstructorを使用して行う
class Champion{ //初期化 constructor({ role } ){ this.role = role; } name(){ return &#39;ガレン&#39;; } } const champion = new Champion({ role: &#39;Top&#39;}); champion //{&amp;quot;role&amp;quot;:&amp;quot;Top&amp;quot;} champion.name();//ガレン  継承 
class Garen{ constructor(options){ this.role = options.role; } useItem(){ return &#39;黒斧&#39;; } } class Darius extends Garen { constructor(options){ //Garenクラスのcontracterを初期化するためにsuperを記述 super(options); this.</description>
    </item>
    
    <item>
      <title>Promise</title>
      <link>https://hiroyuki8823.net/javascript/promise/</link>
      <pubDate>Mon, 07 Jan 2019 23:13:05 +0900</pubDate>
      
      <guid>https://hiroyuki8823.net/javascript/promise/</guid>
      <description>Promise JavaScriptのPromiseについて勉強したので、その忘備録として学習メモを載っけます。
概要 JavaScriptには実行を止めるということが出来ない、なので長い処理を扱いたい場合はある処理を実行して、その後に続きの処理を行うというを順序を行うためにPromiseを利用する。
promiseには３つの状態が存在する
・unresolve 未解決 処理をが終わるのを待っている状態
・resolved 成功　処理が終わって成功している状態
・rejected 失敗 処理が終わって失敗している状態
サンプルを下に記載
const promise = new Promise((resolve, reject) =&amp;gt; { //成功時 resolve(); //失敗時 エラーをスローする reject(); }); promise //resolve時に実行される。 //登録されているthenを全て呼び出す .then(() =&amp;gt; console.log(&#39;成功です。&#39;)) .then(() =&amp;gt; console.log(&#39;複数実行することも可能&#39;)) //reject時に実行される .catch(() =&amp;gt; console.log(&#39;失敗しました&#39;))  Promiseのユースケース
promise = new Promise((resolve, reject) =&amp;gt; { //３秒後に実行 setTimeout(() =&amp;gt; { resolve(); }, 3000) }); promise .then(() =&amp;gt; console.log(&#39;処理が完了しました。&#39;)) .catch(() =&amp;gt; console.log(&#39;処理が失敗しました。&#39;))  APIサーバーなどにリクエストを送ってその結果が返ってきてから次の処理を実行する時に利用される。
fetch fetchはpromiseを使用してAjaxのリクエストを行える</description>
    </item>
    
    <item>
      <title>2018last</title>
      <link>https://hiroyuki8823.net/javascript/2018last/</link>
      <pubDate>Mon, 31 Dec 2018 23:29:21 +0900</pubDate>
      
      <guid>https://hiroyuki8823.net/javascript/2018last/</guid>
      <description>2018も終わる 2018年がもう少しで終わってしまう。
あまりイベントに興味がない性格だけれども、やはり年の瀬というものは気持ちを切り替えるのに良いタイミングだと思う
このブログを作った当初、更新しまくる気だったが12月後半、出会い系にハマってしまい、自己研鑽が疎かになってしまったので2019年はそのようなことがないようにしたい&amp;hellip;
JavaScriptを勉強 年の瀬に何を思ったかReactとReduxを勉強したいと思いはじめた。
しかしそれにはJavaScriptの基本的な知識がないと始まらないので、年末はJavaScriptの勉強に時間をさいた。
今回はこの学習メモを2018年の置き土産にしたいと思う。
JavaScriptのforループ JavaScriptはES6というものが出てforループ文に便利なメソッドが追加され、用途に応じてそれを使い分けるのが良いそうだ。
まずは従来のfor文
var colors = [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;]; for(var i = 0; i &amp;lt; colors.length; i ++){ console.log(colors[i]); }  map var numbers = [1, 2, 3]; var twiceNumber = numbers.map(function(number){ return number * 2 }); twiceNumber; //[2, 4, 6]  numbersの配列に入っている値を２倍してtwiceNumberに格納。
numbersの配列分繰り返す。
filter var products = [ {name: &#39;きゅうり&#39;, type: &#39;野菜&#39;}, {name: &#39;バナナ&#39;, type: &#39;フルーツ&#39;}, {name: &#39;セロリ&#39;, type: &#39;野菜&#39;}, {name: &#39;オレンジ&#39;, type: &#39;フルーツ&#39;}, ]; products.</description>
    </item>
    
    <item>
      <title>このサイトをhttps化してみたらハマった</title>
      <link>https://hiroyuki8823.net/aws/%E3%81%93%E3%81%AE%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92https%E5%8C%96%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Tue, 18 Dec 2018 08:37:59 +0900</pubDate>
      
      <guid>https://hiroyuki8823.net/aws/%E3%81%93%E3%81%AE%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92https%E5%8C%96%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>サイトのhttps化 毎日更新を目標としてるわけではないけど、それでも週３回の更新は目標としていきたいところ。そのためにも日々インプットしていかなければと思う今日この頃
さて今日はこのサイトをhttps化ができたのでその忘備録として残しておく。ハマったところとか、便利だったところとか。
サーバー証明書の発行 https化自体はそこまで難しいわけではないが、CloudFrontやCertifcateManagerという今まで使ったことがなかったのでそれぞれの設定の意味とかを理解するのに少し手間がかかった。
あとは証明書の検証メールが迷惑フォルダに放り込まれていたこともあったがhttps化は上手くいった。
AccessDenied https化にした喜びも束の間、それぞれの記事を開こうとするとAccessDeniedと出力され、記事が読めないという自体に
解決方法 ネットを探していると色々な理由でAccessDeniedと表示されているので、原因は人それぞれなのだろうが、僕の場合はこれで解決した。
CloudFrontのOrigins and Origins Groupsから使用しているOriginsを編集。
S3の使用しているバケットのStatic website hostingのエンドポイントに書かれているURLをOrigin Domain Nameに記載。
DistributionのstatusがDeployedになりアクセスしてみると、記事にアクセスできるようになってるではありませんか!
総括 今回はプログラミングのように、どこでエラーが出ているかなどのヒントが出ず、原因になりうる箇所も多数あったので解決まで時間がかかってしまった。
もう少し設定の意味とか理解が深ければこうはならなかったのではないかと思うが、ひとまず安心。
引き続きAWSへの知見は広めていきたい。</description>
    </item>
    
    <item>
      <title>Rubyのシンボルについて</title>
      <link>https://hiroyuki8823.net/%E3%83%95%E3%82%9A%E3%83%AD%E3%82%AF%E3%82%99%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%AF%E3%82%99/20181211/</link>
      <pubDate>Tue, 11 Dec 2018 08:37:59 +0900</pubDate>
      
      <guid>https://hiroyuki8823.net/%E3%83%95%E3%82%9A%E3%83%AD%E3%82%AF%E3%82%99%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%AF%E3%82%99/20181211/</guid>
      <description>rubyのシンボルについて ただいまrailsを使用してのポートフォリオサイトを作っているのですが、railsチュートリアルを一周して理解が完全でないまま進めていると、時々これはなんだっけというものが出てくるので復習
今回はシンボル
railsだとこういう時に使われるか
def user_params params.require(:user).permit(:name, :email, :password, :password_confirmation) end  リファレンスには  シンボルを表すクラス。シンボルは任意の文字列と一対一に対応するオブジェクトです。 文字列の代わりに用いることもできますが、必ずしも文字列と同じ振る舞いをするわけではありません。 同じ内容のシンボルはかならず同一のオブジェクトです。
 よくわからないですねぇ
中身は整数 プロを目指す人のためのRuby入門のシンボルを開いてみると
* 表面は文字列と同じに見えるが、中身は整数 * 文字列より高速に処理ができる
と書いてある。
そしてイミュータブルオブジェクトなので破壊的な変更はできない。
name = :hiroyuki name.class #=&amp;gt; Symbol name.upcase! #=&amp;gt; NoMethodError  
シンボルの使用例 代表的な使用例はハッシュのキーとして使う。
ハッシュのキーに文字列を使うよりハッシュの方が高速らしい。
ハッシュで使用する際の例
role = {top: &#39;fighter&#39;,mid: &#39;mage&#39;, adc: :&#39;markshman&#39;} role[:adc] #=&amp;gt; &#39;marksman&#39; #キーも値もシンボルの場合 role = {top: :fighter,mid: :mage, adc: :markshman}  例えがわかりにくいがまあいいか。</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://hiroyuki8823.net/%E9%9B%91%E8%A8%98/first_post/</link>
      <pubDate>Mon, 10 Dec 2018 08:37:59 +0900</pubDate>
      
      <guid>https://hiroyuki8823.net/%E9%9B%91%E8%A8%98/first_post/</guid>
      <description>ブログはじめました どうも、都内のSIerでプログラマーをしているhiroyuki8823です。
最近参加しているモクモク会でエンジニアはブログを書くべきだという話を聞いたので、アウトプットの場もかねてブログを作りました。
普段勉強したことや、読んだ本の感想も書いていきます
このブログはhugoとAWSを使用しています blogを始めるに当たって選択肢となるのがハテナブログがwordpressという有名どころです。
しかしエンジニアの端くれ中の端くれなら、少し面白いことをしてみたいと思い、静的サイトジェネレータを使用してサイトを構築したいと思いhugoを選んだ。
Rubyを勉強してるからJkeyllを使用してもよかったが、パフォーマンスがhugoがいいみたいなのでhugoを選択しました
AWSに関してはRoute53でドメインを取得し、それを使用。自分のドメインを持つって気持ちいいもんですね笑
S3を使用すれば簡単に公開できるかと思ってらバケットポリシーで見事に躓いてしまった
まだhttpsにしてないので今後少しづつ進めて行きたいと思う。
あとはCircleCIを使用して更新を自動化していきたい
やりたいことはたくさんあるが&amp;hellip; やりたいことはhugoのテーマーを自作するなど、たくさんあるが時間は有限なので有効に使って行こう</description>
    </item>
    
  </channel>
</rss>